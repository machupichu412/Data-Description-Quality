[
  {
    "ReverseEngineeredDescription": "This Attribute has a static value - <3001> uploaded through flat file.",
    "Comments": "Provide the logic for surrogate key generation like which columns?",
    "OriginalDescription": "This Attribute has a static value - <3001> decided by commercial business and uploaded through flat file."
  },
  {
    "ReverseEngineeredDescription": "Direct mapping to ARRType column coming from DimARRService table.",
    "Comments": "Is it a static source file? Re-check and phrase it accordingly.",
    "OriginalDescription": "Direct mapping to ARRType column coming from static file having string values provided by commercial business."
  },
  {
    "ReverseEngineeredDescription": "Direct mapping to ServiceName column coming from DimARRService table.",
    "Comments": "Is it a static source file? Re-check and phrase it accordingly.",
    "OriginalDescription": "Direct mapping to ServiceName column coming from static file having string values provided by commercial business."
  },
  {
    "ReverseEngineeredDescription": "Direct mapping to ServicePackageSKU column coming from DimARRService table.",
    "Comments": "Is it a static source file? Re-check and phrase it accordingly.",
    "OriginalDescription": "Direct mapping to ServicePackageSKU column coming from static file having string values provided by commercial business."
  },
  {
    "ReverseEngineeredDescription": "This Attribute has a static value (2001,2002,2003,2004,2005) uploaded through flat file.",
    "Comments": "Provide the logic for surrogate key generation like which columns?",
    "OriginalDescription": "This Attribute has a static value (2001,2002,2003,2004,2005) provided by commercial business and uploaded through flat file."
  },
  {
    "ReverseEngineeredDescription": "Direct mapping to ARRType column coming from DimARRService table.",
    "Comments": "Is it a static source file? Re-check and phrase it accordingly.",
    "OriginalDescription": "Direct mapping to ARRType column coming from static file having string values provided by commercial business."
  },
  {
    "ReverseEngineeredDescription": "Direct mapping to ServicePackageName column coming from DimARRService table.",
    "Comments": "Is it a static source file? Re-check and phrase it accordingly.",
    "OriginalDescription": "Direct mapping to ServicePackageName column coming from static file having string values provided by commercial business."
  },
  {
    "ReverseEngineeredDescription": "SurrogateKey generated within UDP NRT to identify unique records of DimCauseType table.",
    "Comments": "Provide the logic for surrogate key generation like which columns? Add source table and source name.",
    "OriginalDescription": "SurrogateKey generated within UDP NRT to identify unique records of DimCauseType table. Generated based on the column CauseType."
  },
  {
    "ReverseEngineeredDescription": "The attribute has hardcoded values of >= 7Days <14Days, < 5hrs, >= Day <3Days, >= 21Days <31Days, Unknown.",
    "Comments": "Please confirm, is it static values or hardcoded? If it is static, it has to be coming from a static file provided by business.",
    "OriginalDescription": "The attribute has static values of  >= 7Days <14Days , < 5hrs , >= Day <3Days , >= 21Days <31Days , Unknown , decided by commercial business and uploaded through flat file."
  },
  {
    "ReverseEngineeredDescription": "The attribute has hardcoded values of >= 7Days <14Days, <1Day, >= 21Days <31Days, >= 1Day <3Days, Unknown.",
    "Comments": "Refer row #15 where attribute is IdleTimeL1 and entity is vwdimidletimespan.",
    "OriginalDescription": "The attribute has static values of  >= 7Days <14Days , <1Day , >= 21Days <31Days , >= 1Day <3Days , Unknown ,decided by commercial business and uploaded through flat file."
  },
  {
    "ReverseEngineeredDescription": "SurrogateKey generated within UDP NRT to identify unique records of DimIdleTimeSpan table.",
    "Comments": "Provide the logic for surrogate key generation like which columns?",
    "OriginalDescription": "SurrogateKey generated within UDP NRT to identify unique records of DimIdleTimeSpan table.\nWhen IdleTimeL1 & IdleTimeL2 = \"Unknown\" and Sort=0 then hardcoded as -1\nWhen IdleTimeL1 ='< 5hrs' & IdleTimeL2 = '<1Day' and Sort=1 then hardcoded as 1\nWhen IdleTimeL1 ='>= 5hrs <8hrs' & IdleTimeL2 = '<1Day' and Sort=1 then hardcoded as 2\nWhen IdleTimeL1 ='>= 8hrs <16hrs' & IdleTimeL2 = '<1Day' and Sort=1 then hardcoded as 3\nWhen IdleTimeL1 ='>= 16hrs <1Day' & IdleTimeL2 = '<1Day' and Sort=1 then hardcoded as 4\nand goes on until it's hardcoded as 10."
  }
]
