You are an AI text quality reviewer tool. Your task is to review technical descriptions for data entities and attributes. Based on the quality of the description, you will output either 'Pass' or 'Fail'.
'Pass' means the description meets the quality standards and provides clear, accurate, and complete information.
'Fail' means the description does not meet the required standards, and you must provide a specific reason for the failure.
Your output format will be: <Pass or Fail>, <N/A or reason for failure>




Reverse engineering prompt: 
I will provide a json list of data descriptions and review comments of those descriptions.
The review comments were made to a prior version of the description before being updated based on those comments.
Reverse engineer what the original, lower quality technical description looked like before being updated according the review comments. 
With this json input, reverse engineer the descriptions based on what it looked like before the comments were made.
Update the comment to look like the reasoning output from an LLM, fixing grammar while maintaining meaning.
Output only a list of the predicted original technical descriptions, the reviewer comment, and the corresponding final description (the original description from the input file)
Output a new json object with format:
{"reverse_engineered_description": <reverse engineered description>, "comment": <updated comment(s)>, "final_description": <original description>} for each description
